/** \page fileformats File formats
 *
 * Description of different file formats used by library.
 *
 * \section lrptiq Raw I/Q data file format
 * liblrpt is able to store/read raw I/Q data to/from files on hard drive. However it expects that
 * these files are in special format. In common, raw I/Q files consist of 5 sections following each
 * other without padding/spaces: header, version info, sampling rate, device name and data.
 * Here we're providing specification details for each of those sections.
 *
 * \subsection lrptiq_header Header section
 * All raw I/Q files should start with \c lrptiq sequence of ASCII chars.
 *
 * \subsection lrptiq_version Version info
 * Right after header version info should be stored as 1-byte unsigned integer.
 *
 * \subsection lrptiq_samplerate Sampling rate
 * Sampling rate should be stored as well so QPSK demodulator will be able to perform demodulation.
 * Sampling rate is stored after version info as 4-byte unsigned integer in Big Endian form.
 *
 * \subsection lrptiq_devicename Device name
 * Device name section should be presented in raw I/Q file even if actual device name is
 * empty string. This section is actually splitted into two adjacent subsections: length and
 * the device name itself. Length is stored as 1-byte unsigned integer so maximum device name is
 * limited to the 255 symbols. Length is followed by device name string (NOT null-terminated) of
 * exactly that length. For example, device name "RTLSDR" should be presented in I/Q file as the
 * following hex values: \c 0x06 \c 0x52 \c 0x54 \c 0x4C \c 0x53 \c 0x44 \c 0x52.
 *
 * \subsection lrptiq_data Data
 * Final section of I/Q file is the I/Q data itself. For portability purposes special form of
 * storing complex-valued I/Q samples was developed.
 *
 * No extra timing information is stored, it will be derived by library by using sampling rate.
 * Because of this consequent I/Q samples are stored one after another in data section.
 * Real and imaginary parts of single I/Q sample are stored next to each other and I followed by Q.
 * Double precision arithmetic (IEEE 754) is used for real and imaginary parts and because of
 * portability issues special transformations for \c double values are needed.
 *
 * First, a variable of a \c double type should be decomposed into normalized mantissa and exponent.
 * Normalized mantissa is a value of a \c double type and belongs to the [0.5; 1) range. Exponent is
 * a signed integer of range [-1022; 1023]. After decomposition normalized mantissa should be
 * multiplied by 2^53 giving signed integer value. Finally, serialized Big Endian 2-byte signed
 * integer exponent followed by serialized Big Endian 8-byte signed integer mantissa represents one
 * complex I/Q sample.
 *
 * For example, let's consider I/Q sample which equals to the (123.456 - 0.009876i). Real part is
 * 123.456 and imaginary is -0.009876. After normalization we'll get exponent equals to the value
 * of 7 and mantissa equals to the 0.9645. Multiplication of 0.9645 by 2^53 gives
 * a value 8687443681197687. Thus serialization to the Big Endian format will give us \c 0x0007 for
 * exponent part and \c 0x001EDD2F1A9FBE77 for mantissa. For the imaginary part exponent equals
 * to the -6 and normalized mantissa equals to the -0.632064. Applying analogous transformations
 * we'll get \c 0xFFFA as serialized exponent and \c 0xFFEBC621B7E0AC7E as serialized mantissa.
 * As a result the sequence of \c 0x0007 \c 0x001EDD2F1A9FBE77 \c 0xFFFA \c 0xFFEBC621B7E0AC7E
 * represents this I/Q sample in liblrpt's format.
 */
